# SORTDIALOG #

// lifecycle & hooks
import React, { useRef, useEffect, useState } from 'react';
import { useActionsWithKey } from '../../../hooks/useActions';
import { useTranslation } from 'react-i18next';

// styling
import { spacing } from '@ui5/webcomponents-react-base';

// helpers, variables & components
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { Dialog } from '@ui5/webcomponents-react/lib/Dialog';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxColumnWrapper, FlexBoxRowWrapper } from '../Form/Layout';
import { TitleWrapper } from '../Form/Text';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import SortDialogAction from '../../../redux/ViewSettings/actions/Sort';
import SortDialogModel from '../../../redux/ViewSettings/SortModel';
import { LabelAndRadioButtonWrapper } from '../Form/LabelAndValue';

// component
const SortDialog = ({
  sortText,
  sortProperties,
  sortIsOpenState,
  reducerKey,
  onLoadFn,
  propertyValue,
  orderValue
}) => {
  const dialogRef = useRef(null);
  const { t } = useTranslation();
  const [onCloseSortDialog] = useActionsWithKey([() => SortDialogAction.ON_SET_SORT_DIALOG_CLOSED()], reducerKey, []);
  const [onSetProperty] = useActionsWithKey([(property) => SortDialogAction.ON_SET_PROPERTY(property)], reducerKey, []);
  const [property, setProperty] = useState(propertyValue ? propertyValue : sortProperties[0]);
  const [order, setOrder] = useState(orderValue);

  useEffect(() => {
    onSetProperty(propertyValue ? propertyValue : sortProperties[0]);
  }, []);

  useEffect(() => {
    sortIsOpenState ? dialogRef.current.open() : dialogRef.current.close();
  }, [sortIsOpenState]);

  // prettier-ignore
  const onApplySorting = () => {
    onLoadFn({ property, order });
    onCloseSortDialog();
  };

  const onResetValues = () => {
    setProperty(propertyValue ? propertyValue : sortProperties[0]);
    setOrder(orderValue);
  };

  const getFooter = () => {
    return (
      <FlexBoxRowWrapper
        alignItems={FlexBoxAlignItems.Center}
        direction={FlexBoxDirection.RowReverse}
        style={spacing.sapUiTinyMargin}
      >
        <Button
          design={ButtonDesign.Transparent}
          onClick={() => onCloseSortDialog()}
        >
          {t('sortDialog.closeButton')}
        </Button>
        <Button
          design="Emphasized"
          onClick={() => onApplySorting()}
          style={spacing.sapUiTinyMarginBeginEnd}
        >
          {t('sortDialog.applyButton')}
        </Button>
      </FlexBoxRowWrapper>
    );
  };

  return (
    <Dialog
      ref={dialogRef}
      onBeforeClose={() => onResetValues()}
      onAfterClose={() => onCloseSortDialog()}
      headerText={t('sortDialog.title')}
      footer={getFooter()}
    >
      <div
        style={{
          width: '15rem',
          maxWidth: '100%',
          padding: '1rem'
        }}
      >
        <FlexBoxColumnWrapper style={{ width: '100%' }}>
          <TitleWrapper level={TitleLevel.H4} style={{ fontWeight: 'bold' }}>
            {t('sortDialog.sortDirection')}
          </TitleWrapper>
          {SortDialogModel.getOrders().map((orderProperty, index) => (
            <LabelAndRadioButtonWrapper
              key={`OrderGroup${orderProperty}`}
              name='OrderGroup'
              value={orderProperty}
              checked={orderProperty === order}
              onChange={e => setOrder(e.target.value)}
              text={SortDialogModel.getOrdersText()[index]} />
          ))}
        </FlexBoxColumnWrapper>

        <FlexBoxColumnWrapper style={{ width: '100%' }}>
          <TitleWrapper
            level={TitleLevel.H4}
            style={{
              fontWeight: 'bold',
              marginTop: '1rem'
            }}
          >
            {t('sortDialog.sortBy')}
          </TitleWrapper>
          {sortProperties.map((sortProperty, index) => (
            <LabelAndRadioButtonWrapper
              key={`PropertiesGroup${sortProperty}`}
              name='PropertiesGroup'
              value={sortProperty}
              checked={sortProperty === property}
              onChange={e => setProperty(e.target.value)}
              text={sortText[index]} />
          ))}
        </FlexBoxColumnWrapper>
      </div>
    </Dialog >
  );
};

// export
export default SortDialog;

# src\components\Content\BusinessOpportunitiesSearch\List\Sort.js #

// lifecycle & hooks
import React, { useCallback } from 'react';
import { useActionsWithKey } from '../../../../hooks/useActions';
import { useSelector } from 'react-redux';

// helpers, variables & components
import SortDialog from '../../../Common/ViewSettings/SortDialog';
import SortDialogAction from '../../../../redux/ViewSettings/actions/Sort';
import SortDialogModel from '../../../../redux/ViewSettings/SortModel';

// component
const Sort = () => {
  // prettier-ignore
  const selectedUserProfile = useSelector(state => state.businessOpportunityUserProfile.filter.selectedItem);
  // prettier-ignore
  const isOpenSort = useSelector(state => state.businessOpportunities.viewSettings.sort.isOpen);
  // prettier-ignore
  const propertySort = useSelector(state => state.businessOpportunities.viewSettings.sort.property);
  // prettier-ignore
  const orderSort = useSelector(state => state.businessOpportunities.viewSettings.sort.order);
  // prettier-ignore
  const [onSetSortParams] = useActionsWithKey([(params) => SortDialogAction.ON_SET_SORT_PARAMS(params)], SortDialogModel.SUPPORTED_SORT.BUSSINESS_OPPORTUNITIES, []);

  const getSortIsOpenState = useCallback(() => {
    if (!selectedUserProfile) {
      return false;
    } else {
      return isOpenSort;
    }
  }, [isOpenSort]);

  return (
    <SortDialog
      reducerKey={SortDialogModel.SUPPORTED_SORT.BUSSINESS_OPPORTUNITIES}
      sortText={SortDialogModel.getPropertiesTextForBusinessOpportunities()}
      sortProperties={SortDialogModel.getPropertiesForBusinessOpportunities()}
      propertyValue={propertySort}
      orderValue={orderSort}
      sortIsOpenState={getSortIsOpenState()}
      onLoadFn={params => onSetSortParams(params)}
    />
  );
};

// export
export default Sort;

# src\components\Content\BusinessOpportunitiesSearch\List\Sort.js #

// lifecycle & hooks
import React, { useCallback } from 'react';
import { useActionsWithKey } from '../../../../hooks/useActions';
import { useSelector } from 'react-redux';

// helpers, variables & components
import AccountTypeModel from '../../../../redux/AccountType/AccountTypeModel';
import SortDialog from '../../../Common/ViewSettings/SortDialog';
import SortDialogAction from '../../../../redux/ViewSettings/actions/Sort';
import SortDialogModel from '../../../../redux/ViewSettings/SortModel';

// component
const Sort = () => {
  // prettier-ignore
  const selectedAccountType = useSelector(state => state.accountType.filter.selectedItem);
  // prettier-ignore
  const sortReducerKey = AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType) ? SortDialogModel.SUPPORTED_SORT.WOB : SortDialogModel.SUPPORTED_SORT.CORPORATE;

  // prettier-ignore
  const isOpenBuyerMember = useSelector(state => state.buyerMember.viewSettings.sort.isOpen);
  // prettier-ignore
  const propertyBuyerMember = useSelector(state => state.buyerMember.viewSettings.sort.property);
  // prettier-ignore
  const orderBuyerMember = useSelector(state => state.buyerMember.viewSettings.sort.order);

  // prettier-ignore
  const isOpenWOB = useSelector(state => state.wobMember.viewSettings.sort.isOpen);
  // prettier-ignore
  const propertyWOB = useSelector(state => state.wobMember.viewSettings.sort.property);
  // prettier-ignore
  const orderWOB = useSelector(state => state.wobMember.viewSettings.sort.order);

  // prettier-ignore
  const [onSetSortParams] = useActionsWithKey([(params) => SortDialogAction.ON_SET_SORT_PARAMS(params)], sortReducerKey, []);

  const getSortIsOpenState = useCallback(() => {
    if (!selectedAccountType) {
      return false;
    } else {
      return AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
        ? isOpenWOB
        : isOpenBuyerMember;
    }
  }, [isOpenWOB, isOpenBuyerMember]);

  return (
    <SortDialog
      reducerKey={
        AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
          ? SortDialogModel.SUPPORTED_SORT.WOB
          : SortDialogModel.SUPPORTED_SORT.CORPORATE
      }
      sortText={
        AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
          ? SortDialogModel.getPropertiesTextForWOB()
          : SortDialogModel.getPropertiesTextForCorporate()
      }
      sortProperties={
        AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
          ? SortDialogModel.getPropertiesForWOB()
          : SortDialogModel.getPropertiesForCorporate()
      }
      propertyValue={
        AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
          ? propertyWOB
          : propertyBuyerMember
      }
      orderValue={
        AccountTypeModel.isSelectedAccountTypeWOB(selectedAccountType)
          ? orderWOB
          : orderBuyerMember
      }
      sortIsOpenState={getSortIsOpenState()}
      onLoadFn={params => onSetSortParams(params)}
    />
  );
};

// export
export default Sort;

# src\redux\ViewSettings\SortModel.js #

import i18n from '../../utils/i18n';

// export
export default {
  SUPPORTED_SORT: {
    WOB: 'WOB',
    CORPORATE: 'CORPORATE',
    BUSSINESS_OPPORTUNITIES: 'BUSSINESS_OPPORTUNITIES'
  },

  SORT_DIALOG_STATE: {
    OPENED: 'OPENED',
    CLOSED: 'CLOSED'
  },

  getDefaultSortParameters() {
    return [];
  },

  getDefaultProperty() {
    return '';
  },

  getDefaultOrder() {
    return 'asc';
  },

  getOrdersText() {
    return [
      i18n.t('sortDialog.sortDirection.ascending'),
      i18n.t('sortDialog.sortDirection.descending')
    ];
  },

  getOrders() {
    return ['asc', 'desc'];
  },

  getPropertiesTextForWOB() {
    return [
      i18n.t('sortDialog.sortOption.name'),
      i18n.t('sortDialog.sortOption.yearEstablished')
    ];
  },

  getPropertiesForWOB() {
    return ['name', 'yearEstablished'];
  },

  getPropertiesTextForCorporate() {
    return [
      i18n.t('sortDialog.sortOption.name'),
      i18n.t('sortDialog.sortOption.headquartersLocation'),
      i18n.t('sortDialog.sortOption.organizationIndustry')
    ];
  },

  getPropertiesForCorporate() {
    return ['name', 'headquartersLocation', 'companyIndustry'];
  },

  getPropertiesTextForBusinessOpportunities() {
    return [
      i18n.t('sortDialog.sortOption.title'),
      i18n.t('sortDialog.sortOption.location')
    ];
  },

  getPropertiesForBusinessOpportunities() {
    return ['title', 'locationCodes'];
  },

  combineSortParameters: (property, direction) => {
    if (!property && !direction) {
      return '';
    } else {
      return property + ',' + direction;
    }
  }
};

# src\redux\ViewSettings\SortModel.js #

// lifecycle
import { createAction } from 'redux-actions';

// variables
// prettier-ignore
const ON_SET_SORT_PARAMS = createAction('ON_SET_SORT_PARAMS');
// prettier-ignore
const ON_CLEAR_SORT_PARAMS = createAction('ON_CLEAR_SORT_PARAMS');
// prettier-ignore
const ON_SET_PROPERTY = createAction('ON_SET_PROPERTY');
// prettier-ignore
const ON_SET_SORT_DIALOG_CLOSED = createAction('ON_SET_SORT_DIALOG_CLOSED');
// prettier-ignore
const ON_SET_SORT_DIALOG_OPENED = createAction('ON_SET_SORT_DIALOG_OPENED');

// export
export default {
  ON_SET_SORT_PARAMS,
  ON_CLEAR_SORT_PARAMS,
  ON_SET_PROPERTY,
  ON_SET_SORT_DIALOG_CLOSED,
  ON_SET_SORT_DIALOG_OPENED
};

# src\redux\ViewSettings\actions\Sort.js #

// lifecycle
import { handleActions } from 'redux-actions';

// variables
import ActionSort from '../actions/Sort';
import Model from '../SortModel';

// initial state
const INITIAL_STATE = {
  isOpen: false,
  params: Model.getDefaultSortParameters(),
  property: Model.getDefaultProperty(),
  order: Model.getDefaultOrder()
};

// component
const reducer = handleActions(
  {
    [ActionSort.ON_SET_SORT_DIALOG_OPENED]: state => {
      return {
        ...state,
        isOpen: true
      };
    },
    [ActionSort.ON_SET_SORT_DIALOG_CLOSED]: state => {
      return {
        ...state,
        isOpen: false
      };
    },
    [ActionSort.ON_SET_PROPERTY]: (state, action) => {
      return {
        ...state,
        property: action.payload
      };
    },
    [ActionSort.ON_SET_SORT_PARAMS]: (state, action) => {
      return {
        ...state,
        property: action.payload.property,
        order: action.payload.order,
        params: Model.combineSortParameters(
          action.payload.property,
          action.payload.order
        )
      };
    },
    [ActionSort.ON_CLEAR_SORT_PARAMS]: () => {
      return INITIAL_STATE;
    }
  },
  INITIAL_STATE
);

// export
export default reducer;
